---

name: Об интерфейсах
theory: |

  В этом уроке мы поговорим об интерфейсах. Мы узнаем, что это такое, зачем они нужны, и в каких случаях их стоит использовать вместо типов.
  
  ## Что такое интерфейс
  
  **Интерфейс** — это конструкция языка TypeScript, которая используется, чтобы описывать объекты и функции.

  Рассмотрим следующий пример:

  ```typescript
  interface IUser {
    firstName: string;
    pointsCount: number;
  }

  const user: IUser = {
    firstName: 'Mark',
    pointsCount: 100,
  };
  ```

  В данном фрагменте мы создали интерфейс и реализовали на его основе объект `user`.

  Интерфейс выглядит как определение объектного типа. Объектные типы и интерфейсы взаимозаменяемы почти во всех ситуациях. Сравним с примером выше:

  ```typescript
  type User = {
    firstName: string;
    pointsCount: number;
  }

  const user: User = {
    firstName: 'Mark',
    pointsCount: 100,
  };
  ```

  Здесь мы реализовали такой же объект, но уже на основе типа, а не интерфейса. Разницы почти нет.

  Документация TypeScript говорит о том, что мы можем выбирать, что использовать — тип или интерфейс. Выбор зависит от ситуации. В таком случае возникает вопрос, зачем нужны интерфейсы, когда уже есть типы?

  ## Когда использовать интерфейсы

  Интерфейсы и типы во многом похожи. Но есть отличия, на основе которых мы и можем выбирать, что именно следует использовать в конкретном случае. 
  
  Главная особенность интерфейсов связана с классами. Классы, которые реализуют интерфейсы, содержат внутри себя свойства и методы, указанные в реализуемом интерфейсе:

  ```typescript
  interface Countable {
    count(): number;
  }

  class SchoolClass implements Countable {
    // Тут какая-то логика
    count(): number {
      // Обязательно создать этот метод, так как он указан в интерфейсе
    }
  }

  const sc = new SchoolClass();
  // Возвращает число студентов в классе
  sc.count();
  ```

  В этом примере мы реализовали класс на основе интерфейса. Теперь во всех функциях, где объекты используются только для того, чтобы посчитать количество чего-либо внутри них, можно указывать `Countable` вместо `SchoolClass`:

  ```typescript
  // А не function doSomething(obj: SchoolClass)
  function doSomething(obj: Countable) {
    // Где-то внутри вызывается
    obj.count();
  }
  ```

  Так благодаря интерфейсам функция становится более универсальной. Мы можем передать любые объекты, соответствующие `Countable`, а не только `SchoolClass`. В программировании такая возможность называется полиморфизмом подтипов ([Subtyping](https://en.wikipedia.org/wiki/Subtyping)).

instructions: |

  Вам дан интерфейс IVehicle. Задача состоит в том, чтобы на основе этого интерфейса реализовать класс Car, который будет иметь метод calcFuelNeeded, принимающий расстояние в километрах и возвращающий расход топлива на указанную дистанцию. Также у класса Car должна быть функция-конструктор, которая принимает и реализует свойства, указанные в интерфейсе.

  ```typescript
  const porche = new Car(4, 'red', true, 20);
  console.log(porche.calcFuelNeeded(200)); // 40
  ```

tips:
  - |
    [Interfaces vs Types](https://ultimatecourses.com/blog/typescript-interfaces-vs-types)
