---

name: Тип Void
theory: |

  В этом уроке мы рассмотрим тип `void`. Он указывается как возврат для функций, которые ничего не возвращают. 
  
  ## Использование типа Void
  
  `void` автоматически выводится, когда внутри функции нет инструкции `return` или она пустая:

  ```typescript
  function noop() {
    // внутри пусто
  }
  ```

  В JavaScript подобные функции возвращают `undefined`, но в TypeScript `void` и `undefined` — это разные вещи. Они различаются по контекстной типизации. А происходит это из-за особенностей работы самого JavaScript. Самый яркий пример — метод `forEach()`.

  Метод `forEach()` не использует данные, возвращаемые переданным колбеком, который вызывается внутри. Возможно, логично было бы определить возврат как `undefined`, но посмотрим на пример:

  ```typescript
  const numbers = [1, 2, 3];
  const result = [];

  numbers.forEach((n) => result.push(n));
  ```

  Метод `push()` возвращает новую длину массива. Если бы `forEach()` требовал от колбека возврат `undefined`, то такой код привел бы к ошибке компиляции. Его пришлось бы переписать, например, так:

  ```typescript
  // Теперь колбек ничего не возвращает,
  // соответственно, результат вызова undefined
  numbers.forEach((n) => {
    result.push(n);
  });
  ```

  Чтобы не писать такой код, и был введен `void`. Он позволяет возвращать любые данные, но делает так, что их использование бессмысленно.

  Мы можем определить тип функции, который возвращает `void`, и использовать его для типизации переменной:

  ```typescript
  type VoidFunc = () => void;

  // Тип функции определяется через контекст
  // присваивания ее переменной с типом VoidFunc
  const f: VoidFunc = () => true;

  const v = f();
  ```

  Хотя `f()` возвращает `true`, переменная `v` имеет тип `void`. Это означает, что мы не можем использовать ее для чего-либо, кроме как для присваивания другой переменной с типом `void`.

  Существует единственная ситуация, когда указание `void` явно запрещает возврат из функции. Это определение функции вне контекста использования, когда ее тип указывается явно:

  ```typescript
  function foo(): void {
    return true; // Error!
  }

  const bar = function(): void {
    return true; // Error!
  };
  ```

  В этом случае возврат любого значения приведет к ошибке компиляции.

  Также `void` является оператором JavaScript, поэтому важно не запутаться с ним. Он вычисляет выражение, которое следует за ним и возвращает `undefined`:

  ```typescript
  void 10 === undefined // true
  ```

instructions: |

  Попробуйте самостоятельно определить функцию `forEach()` для чисел:

  ```typescript
  forEach([1, 2, 3], (n) => console.log(n));
  // 1
  // 2
  // 3

  const result = [];
  forEach([1, 2, 3], (n) => result.push(n));
  // [1, 2, 3]
  ```

  Параметры функции:

  1. Массив чисел
  2. Анонимная функция, которая принимает на вход число и возвращает `void`. У этой функции есть необязательный параметр — индекс элемента в массиве

  ```typescript
  forEach([8, 9], (n, index) => console.log(index + n));
  // 8
  // 10
  ```

tips:
  - |
    [Официальная документация](https://www.typescriptlang.org/docs/handbook/basic-types.html#void)
  - |
    [void в TypeScript и JavaScript](https://habr.com/ru/company/ruvds/blog/468229/)
